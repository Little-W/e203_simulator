EXTRA_MKS := $(wildcard Makefile.local $(SOTFWARE_MAKEFILES_DIR)/Makefile.global)
ifneq ("$(strip $(EXTRA_MKS))", "")
$(info Obtaining addtional make variables from $(EXTRA_MKS))
include $(EXTRA_MKS)
endif



ARCH := $(shell uname -m)
ifeq ($(ARCH),x86_64)
	ifeq ($(wildcard $(CC)),)
		ifeq ($(USE_OPEN_GNU_GCC),0)
		shell := $(shell rm x86_64-riscv-gnu-toolchain.tar.xz)
		shell := $(shell wget https://bitbucket.org/little-w/e203_simulator/downloads/x86_64-riscv-gnu-toolchain.tar.xz || rm x86_64-riscv-gnu-toolchain.tar.xz)
		shell := $(shell rm -rf ${SOTFWARE_TOOLS_DIR}/gcc)
		shell := $(shell mkdir -p ${SOTFWARE_TOOLS_DIR}/gcc && mv x86_64-riscv-gnu-toolchain.tar.xz ${SOTFWARE_TOOLS_DIR}/gcc && cd ${SOTFWARE_TOOLS_DIR}/gcc && tar -xvf x86_64-riscv-gnu-toolchain.tar.xz && rm x86_64-riscv-gnu-toolchain.tar.xz)
		else
		shell := $(shell rm x86_64-open_riscv-gnu-toolchain.tar.xz)
		shell := $(shell wget https://bitbucket.org/little-w/e203_simulator/downloads/x86_64-open_riscv-gnu-toolchain.tar.xz || rm x86_64-open_riscv-gnu-toolchain.tar.xz)
		shell := $(shell rm -rf ${SOTFWARE_TOOLS_DIR}/gcc_open)
		shell := $(shell mkdir -p ${SOTFWARE_TOOLS_DIR}/gcc_open && mv x86_64-open_riscv-gnu-toolchain.tar.xz ${SOTFWARE_TOOLS_DIR}/gcc_open && cd ${SOTFWARE_TOOLS_DIR}/gcc_open && tar -xvf x86_64-open_riscv-gnu-toolchain.tar.xz && rm x86_64-open_riscv-gnu-toolchain.tar.xz)
		endif
	endif
	ifeq ($(wildcard $(OPENOCD)),)
	shell := $(shell rm openocd-12.0_x86_64.tar.xz)
	shell := $(shell wget https://bitbucket.org/little-w/e203_simulator/downloads/openocd-12.0_x86_64.tar.xz ||  rm openocd-12.0_x86_64.tar.xz)
	shell := $(shell rm -rf ${SOTFWARE_TOOLS_DIR}/openocd)
	shell := $(shell mkdir -p ${SOTFWARE_TOOLS_DIR}/openocd && mv openocd-12.0_x86_64.tar.xz ${SOTFWARE_TOOLS_DIR}/openocd && cd ${SOTFWARE_TOOLS_DIR}/openocd && tar -xvf openocd-12.0_x86_64.tar.xz && rm openocd-12.0_x86_64.tar.xz)
	endif
	ifeq ($(wildcard $(QEMU_EXEC)),)
	shell := $(shell rm openocd-12.0_x86_64.tar.xz)
	shell := $(shell wget https://bitbucket.org/little-w/e203_simulator/downloads/x86_64_qemu-riscv.tar.xz || rm openocd-12.0_x86_64.tar.xz)
	shell := $(shell rm -rf ${SOTFWARE_TOOLS_DIR}/qemu)
	shell := $(shell mkdir -p ${SOTFWARE_TOOLS_DIR}/qemu && mv x86_64_qemu-riscv.tar.xz ${SOTFWARE_TOOLS_DIR}/qemu && cd ${SOTFWARE_TOOLS_DIR}/qemu && tar -xvf x86_64_qemu-riscv.tar.xz && rm x86_64_qemu-riscv.tar.xz)
	endif

else ifeq ($(ARCH),aarch64)

	ifeq ($(wildcard $(CC)),)
		ifeq ($(USE_OPEN_GNU_GCC),0)
		shell := $(shell rm arm64-riscv-gnu-toolchain.tar.xz)
		shell := $(shell wget https://bitbucket.org/little-w/e203_simulator/downloads/arm64-riscv-gnu-toolchain.tar.xz || rm arm64-riscv-gnu-toolchain.tar.xz)
		shell := $(shell rm -rf ${SOTFWARE_TOOLS_DIR}/gcc)
		shell := $(shell mkdir -p ${SOTFWARE_TOOLS_DIR}/gcc && mv arm64-riscv-gnu-toolchain.tar.xz ${SOTFWARE_TOOLS_DIR}/gcc && cd ${SOTFWARE_TOOLS_DIR}/gcc && tar -xvf arm64-riscv-gnu-toolchain.tar.xz && rm arm64-riscv-gnu-toolchain.tar.xz)
		else
		shell := $(shell rm arm64-open_riscv-gnu-toolchain.tar.xz)
		shell := $(shell wget https://bitbucket.org/little-w/e203_simulator/downloads/arm64-open_riscv-gnu-toolchain.tar.xz || rm arm64-open_riscv-gnu-toolchain.tar.xz)
		shell := $(shell rm -rf ${SOTFWARE_TOOLS_DIR}/gcc_open)
		shell := $(shell mkdir -p ${SOTFWARE_TOOLS_DIR}/gcc_open && mv arm64-open_riscv-gnu-toolchain.tar.xz ${SOTFWARE_TOOLS_DIR}/gcc_open && cd ${SOTFWARE_TOOLS_DIR}/gcc_open && tar -xvf arm64-open_riscv-gnu-toolchain.tar.xz && rm arm64-open_riscv-gnu-toolchain.tar.xz)
		endif
	endif
	ifeq ($(wildcard $(OPENOCD)),)
	shell := $(shell rm openocd-12.0_arm64.tar.xz)
	shell := $(shell wget https://bitbucket.org/little-w/e203_simulator/downloads/openocd-12.0_arm64.tar.xz || rm openocd-12.0_arm64.tar.xz)
	shell := $(shell rm -rf ${SOTFWARE_TOOLS_DIR}/openocd)
	shell := $(shell mkdir -p ${SOTFWARE_TOOLS_DIR}/openocd && mv openocd-12.0_arm64.tar.xz ${SOTFWARE_TOOLS_DIR}/openocd && cd ${SOTFWARE_TOOLS_DIR}/openocd && tar -xvf openocd-12.0_arm64.tar.xz && rm openocd-12.0_arm64.tar.xz)
	endif
	ifeq ($(wildcard $(QEMU_EXEC)),)
	shell := $(shell rm arm64_qemu-riscv.tar.xz)
	shell := $(shell wget https://bitbucket.org/little-w/e203_simulator/downloads/arm64_qemu-riscv.tar.xz || rm arm64_qemu-riscv.tar.xz)
	shell := $(shell rm -rf ${SOTFWARE_TOOLS_DIR}/qemu)
	shell := $(shell mkdir -p ${SOTFWARE_TOOLS_DIR}/qemu && mv arm64_qemu-riscv.tar.xz ${SOTFWARE_TOOLS_DIR}/qemu && cd ${SOTFWARE_TOOLS_DIR}/qemu && tar -xvf arm64_qemu-riscv.tar.xz && rm arm64_qemu-riscv.tar.xz)
	endif


else
    $(error Unsupported architecture: $(ARCH))
endif


ifeq ($(RISCV_ARCH),)
$(warning RISCV_ARCH is not defined, use $(DEFAULT_RISCV_ARCH) as default)
RISCV_ARCH := $(DEFAULT_RISCV_ARCH)
endif
ifeq ($(RISCV_ABI),)
$(warning RISCV_ABI is not defined, use $(DEFAULT_RISCV_ABI) as default)
RISCV_ABI := $(DEFAULT_RISCV_ABI)
endif

MKDEP_OPT = -MMD -MT $@ -MF $@.d
C_INCLUDE_OPT = $(foreach dir,$(sort $(INCDIRS) $(C_INCDIRS)),-I$(dir))
CXX_INCLUDE_OPT = $(foreach dir,$(sort $(INCDIRS) $(CXX_INCDIRS)),-I$(dir))
ASM_INCLUDE_OPT = $(foreach dir,$(sort $(INCDIRS) $(ASM_INCDIRS)),-I$(dir))

ifeq ($(NOGC),1)
GC_CFLAGS =
GC_LDFLAGS =
else
GC_CFLAGS = -ffunction-sections -fdata-sections
GC_LDFLAGS = -Wl,--gc-sections -Wl,--check-sections
endif

ifeq ($(SIMULATION),1)
COMMON_FLAGS += -DCFG_SIMULATION
endif

ifeq ($(BANNER),0)
COMMON_FLAGS += -DHBIRD_BANNER=0
endif

ifeq ($(NEWLIB),nano)
NEWLIB_LDFLAGS = --specs=nano.specs
ifeq ($(PFLOAT),1)
NEWLIB_LDFLAGS += -u _printf_float
endif
else
NEWLIB_LDFLAGS =
endif

ifeq ($(SIMU),xlspike)
COMMON_FLAGS += -DSIMULATION_XLSPIKE
endif
ifeq ($(SIMU),spike)
COMMON_FLAGS += -DSIMULATION_SPIKE
endif
ifeq ($(SIMU),rtl)
COMMON_FLAGS += -DSIMULATION_RTL
endif

ifeq ($(USE_OPEN_GNU_GCC),1)
COMMON_FLAGS += -march=$(RISCV_ARCH)_zicsr
else
COMMON_FLAGS += -march=$(RISCV_ARCH)
endif
COMMON_FLAGS += -g  -mabi=$(RISCV_ABI) -mcmodel=medany \
		$(GC_CFLAGS) -fno-common -DDOWNLOAD_MODE=DOWNLOAD_MODE_$(DOWNLOAD_UPPER) \
		-DDOWNLOAD_MODE_STRING=\"$(DOWNLOAD_UPPER)\"

COMMON_FLAGS_ASM += -S -march=$(RISCV_ARCH) -mabi=$(RISCV_ABI) -mcmodel=medany \
		$(GC_CFLAGS) -fno-common -DDOWNLOAD_MODE=DOWNLOAD_MODE_$(DOWNLOAD_UPPER) \
		-DDOWNLOAD_MODE_STRING=\"$(DOWNLOAD_UPPER)\"

# Add SoC and Board defines
# SOC_XXX and BOARD_XXX
COMMON_FLAGS += -DSOC_$(SOC_UPPER) -DBOARD_$(BOARD_UPPER)

CFLAGS += $(COMMON_FLAGS) $(C_INCLUDE_OPT) $(MKDEP_OPT)
CFLAGS_ASM += $(COMMON_FLAGS_ASM) $(C_INCLUDE_OPT) $(MKDEP_OPT)
CXXFLAGS += $(COMMON_FLAGS) $(CXX_INCLUDE_OPT) $(MKDEP_OPT)
ASMFLAGS += $(COMMON_FLAGS) $(ASM_INCLUDE_OPT) $(MKDEP_OPT)

LIB_OPT = $(addprefix -L, $(sort $(LIBDIRS)))

LDFLAGS += -T $(LINKER_SCRIPT) -lstdc++ -nostartfiles -Wl,-M,-Map=$(TARGET).map \
		$(GC_LDFLAGS) $(NEWLIB_LDFLAGS) --specs=nosys.specs \
		$(LIB_OPT) $(LDLIBS) -march=$(RISCV_ARCH) -mabi=$(RISCV_ABI)
LDFLAGS2 += -lstdc++ $(LIB_OPT) $(LDLIBS)
	

# More options needed by -flto, if not passed, will fail in linking phase
LDFLAGS += -u _isatty -u _write -u _sbrk -u _read -u _close -u _fstat -u _lseek


# Prerequesties
MAKEFILE_PREREQS += $(SOTFWARE_MAKEFILES_DIR)/Makefile.soc
MAKEFILE_PREREQS += $(SOTFWARE_MAKEFILES_DIR)/Makefile.env
MAKEFILE_PREREQS += $(SOTFWARE_MAKEFILES_DIR)/Makefile.core
MAKEFILE_PREREQS += $(SOTFWARE_MAKEFILES_DIR)/Makefile.files
MAKEFILE_PREREQS += $(SOTFWARE_MAKEFILES_DIR)/Makefile.misc
MAKEFILE_PREREQS += $(SOTFWARE_MAKEFILES_DIR)/Makefile.rules
MAKEFILE_PREREQS += $(EXTRA_MKS)
MAKEFILE_PREREQS += Makefile

LINK_PREREQS += $(LINKER_SCRIPT)

COMMON_PREREQS = $(MAKEFILE_PREREQS) $(LINK_PREREQS)
